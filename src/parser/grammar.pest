program = _{ SOI ~ stmt* ~ EOI }
COMMENT = _{ "\\\\" ~ (!NEWLINE ~ '\u{00}'..'\u{7F}')* ~ NEWLINE | "/*" ~ (!"*/" ~ '\u{00}'..'\u{7F}')* ~ "*/" }
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
scope = { "{" ~ stmt* ~ "}" }
return_ = @{ "return" ~ !ASCII_ALPHANUMERIC }
ez = @{ "ez" ~ !ASCII_ALPHANUMERIC }
for_ = @{ "for" ~ !ASCII_ALPHANUMERIC }
while_ = @{ "while" ~ !ASCII_ALPHANUMERIC }
otherwise = @{ "otherwise" ~ !ASCII_ALPHANUMERIC }
if_ = @{ "if" ~ !ASCII_ALPHANUMERIC }
out_ = @{ "out" ~ !ASCII_ALPHANUMERIC }
let_ = @{ "let" ~ !ASCII_ALPHANUMERIC }

stmt = {
    assign
    | reassign
    | deref_assign
    | out
    | if_stmt
    | while_stmt
    | for_stmt
    | function
    | databox
    | return_stmt
    | expr
    | scope
}
keyword = {
    ("byte"
    | "let"
    | "return"
    | "true"
    | "false"
    | "out"
    | "while"
    | "for"
    | "if"
    | "otherwise"
    | "ez"
    | "input") ~ !ASCII_ALPHANUMERIC
}
kind = {
    "bool" ~ !ASCII_ALPHANUMERIC
    | "byte" ~ !ASCII_ALPHANUMERIC
    | ";"
    | "ez" ~ "(" ~ (kind ~ ("," ~ kind)*)? ~ ")" ~ ("->" ~ kind)?
    | "&" ~ kind
    | "*" ~ kind
    | ident
}

ident = @{
    !keyword
    ~ (ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*
    | "_" ~ (ASCII_ALPHANUMERIC | "_")+)
    | placeholder
}
placeholder = { "_" }
boolean = { ("true" | "false") ~ !ASCII_ALPHANUMERIC }
none = { ";" }
input = { "in" ~ !ASCII_ALPHANUMERIC }
string = ${ "\"" ~ string_letter* ~ "\"" }
string_letter = {
    !("\"" | "\\") ~ '\u{00}'..'\u{7F}'
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "'" )
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
char = ${ "'" ~ char_letter ~ "'" }
char_letter = {
    !("'" | "\\") ~ '\u{00}'..'\u{7F}'
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "'" )
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
number = @{"0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
array = { "<" ~ kind ~ ">" ~ "[" ~ (expr ~ ("," ~ expr)*)? ~ "]" }

value = _{
    number
    | boolean
    | none
    | string
    | char
    | array
    | input
    | ident
    | "(" ~ expr ~ ")"
}
expr = {
    type_cast
    | unop_expr
    | ternary
    | databox_const
    | binop_expr
    | increment
    | decrement
    | function_expr
    | attr_access
    | index
    | call
    | value
}

unop_expr = { unop ~ expr }
type_cast = { "<" ~ kind ~ ">" ~ expr }
ternary = { value ~ "?" ~ expr ~ ":" ~ expr }  //! FIXME: change value to expr
databox_const = {  //! FIXME: change ident to expr
    ident ~ "{"
        ~ (ident ~ ":" ~ expr
        ~ ("," ~ ident ~ ":" ~ expr)*)?
    ~ "}"
}
binop_expr = { value ~ binop ~ expr }  //! FIXME: change value to expr
call = { value ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }  //! FIXME: change value to expr
attr_access = { value ~ "." ~ ident }  //! FIXME: change 1st value to expr
index = { value ~ "[" ~ expr ~ "]" }  //! FIXME: change value to expr
increment = { value ~ "++" }  //! FIXME: change value to expr
decrement = { value ~ "--" }  //! FIXME: change value to expr
function_expr = {
    "ez" ~ "(" 
    ~ (ident ~ ":" ~ kind
    ~ ("," ~ ident ~ ":" ~ kind)*)? 
    ~ ")"
    ~ ("->" ~ kind)?
    ~ stmt
}

binop = {(
    "+"
    | "-"
    | "*"
    | "/"
    | "%"
    | "|"
    | "^"
    | "&"
    | "**"
    | ">>"
    | "<<"
    | "=="
    | "!="
    | ">="
    | "<="
    | ">"
    | "<"
)}
unop = {(
    "&"
    | "-"
    | "!"
    | "*"
)}
reassign_op = {
    "="
    | "+="
    | "-="
    | "/="
    | "%="
    | "**="
    | ">>="
    | "<<="
    | "&="
    | "|="
    | "^="
}

assign = { let_ ~ ident ~ (":" ~ kind)? ~ "=" ~ expr }
reassign = { ident ~ reassign_op ~ expr }
out = { out_ ~ expr }
return_stmt = { return_ ~ expr }
deref_assign = { deref_sign+ ~ ident ~ reassign_op ~ expr }
deref_sign = { "*" }

if_stmt = {
    if_ ~ expr ~ stmt
    ~ (otherwise
    ~   stmt
    )?
}
while_stmt = { while_ ~ expr ~ stmt }
for_stmt = {
    for_ ~ ":"
    ~    stmt ~ ":" ~ expr ~ ":" ~ stmt 
    ~ ":" ~ stmt
}
function = {
    ez ~ ident ~ "(" 
    ~ (ident ~ ":" ~ kind
    ~ ("," ~ ident ~ ":" ~ kind)*)? 
    ~ ")"
    ~ ("->" ~ kind)?
    ~ stmt
}
databox = {
    ez ~ ident ~ "{"
        ~ (ident ~ ":" ~ kind
        ~ ("," ~ ident ~ ":" ~ kind)*)?
    ~ "}"
}
