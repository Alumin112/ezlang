program = _{ SOI ~ stmt* ~ EOI }
COMMENT = _{ "//" ~ (!NEWLINE ~ '\u{00}'..'\u{7F}')* ~ NEWLINE | "/*" ~ (!"*/" ~ '\u{00}'..'\u{7F}')* ~ "*/" }
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
scope = { "{" ~ stmt* ~ "}" }
return_ = @{ "return" ~ !ASCII_ALPHANUMERIC }
box_ = @{ "box" ~ !ASCII_ALPHANUMERIC }
fx = @{ "fx" ~ !ASCII_ALPHANUMERIC }
for_ = @{ "for" ~ !ASCII_ALPHANUMERIC }
while_ = @{ "while" ~ !ASCII_ALPHANUMERIC }
otherwise = @{ "otherwise" ~ !ASCII_ALPHANUMERIC }
if_ = @{ "if" ~ !ASCII_ALPHANUMERIC }
out_ = @{ "out" ~ !ASCII_ALPHANUMERIC }
let_ = @{ "let" ~ !ASCII_ALPHANUMERIC }
file_ = @{ "file" ~ !ASCII_ALPHANUMERIC }
byte = @{ "byte" ~ !ASCII_ALPHANUMERIC }
const_ = @{ "const" ~ !ASCII_ALPHANUMERIC }

stmt = {
    (increment
    | decrement
    | out
    | file
    | return_stmt
    | if_stmt
    | while_stmt
    | for_stmt
    | function
    // | databox
    | assign
    | reassign
    | expr
    | scope)
    ~ ";"?
}
keyword = {
    ("byte"
    | "let"
    | "return"
    | "true"
    | "false"
    | "out"
    | "while"
    | "for"
    | "if"
    | "otherwise"
    | "fx"
    | "box"
    | "const"
    | "file"
    | "in") ~ !ASCII_ALPHANUMERIC
}

kind = {
    byte
    | ";"
    | "fx" ~ "(" ~ (kind ~ ("," ~ kind)*)? ~ ")" ~ fx_ret?
    | "&" ~ kind
    | "*" ~ kind
    | ident
}

ident = @{ !keyword ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
boolean = @{ ("true" | "false") ~ !ASCII_ALPHANUMERIC }
none = { ";" }
input = @{ "in" ~ !ASCII_ALPHANUMERIC }
string = ${ "\"" ~ string_letter* ~ "\"" }
string_letter = {
    !("\"" | "\\") ~ '\u{00}'..'\u{7F}'
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "\'" )
    | "\\" ~ ("x" ~ ASCII_HEX_DIGIT+)
    | "\\" ~ (ASCII_OCT_DIGIT{, 3})
}
char = ${ "\'" ~ char_letter ~ "\'" }
char_letter = {
    !("'" | "\\") ~ '\u{00}'..'\u{7F}'
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "\'" )
    | "\\" ~ ("x" ~ ASCII_HEX_DIGIT+)
    | "\\" ~ (ASCII_OCT_DIGIT{, 3})
}
number = @{"0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
// array = { "[" ~ (expr ~ ("," ~ expr)*)? ~ "]" }
pointer = { "{" ~ expr ~ "}" }

value = _{
    number
    | boolean
    | none
    | string
    | char
    // | array
    | input
    | pointer
    | ident
    | "(" ~ expr ~ ")"
}
expr = {
    type_cast
    | unop_expr
    | ternary
    // | databox_const
    | binop_expr
    | function_expr
    // | attr_access
    // | index
    | call
    | value
}

unop_expr = { unop ~ expr }
type_cast = { "<" ~ kind ~ ">" ~ expr }
ternary = { if_ ~ expr ~ "?"? ~ expr ~ ":"? ~ expr }
// databox_const = {
//     ident ~ "{"
//         ~ (ident ~ ":" ~ expr
//         ~ ("," ~ ident ~ ":" ~ expr)*)?
//     ~ "}"
// }
binop_expr = { value ~ binop ~ expr }  //! FIXME: change value to expr
call = { value ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }  //! FIXME: change value to expr
// attr_access = { value ~ "." ~ ident }  //! FIXME: change value to expr
// index = { value ~ "[" ~ expr ~ "]" }  //! FIXME: change value to expr
increment = { "+" ~ "+" ~ expr }
decrement = { "-" ~ "-" ~ expr }
function_expr = {
    fx ~ "(" 
    ~ (ident ~ ":" ~ kind
    ~ ("," ~ ident ~ ":" ~ kind)*)? 
    ~ ")"
    ~ fx_ret?
    ~ stmt
}

binop = {(
    "+"
    | "-"
    | "*"
    | "/"
    | "%"
    | "|"
    | "^"
    | "&"
    | ">>"
    | "<<"
    | "=="
    | "!="
    | ">="
    | "<="
    | ">"
    | "<"
)}
unop = {(
    "&"
    | "-"
    | "!"
    | "*"
)}
reassign_op = {
    "="
    | "+="
    | "-="
    | "/="
    | "%="
    | ">>="
    | "<<="
    | "&="
    | "|="
    | "^="
}

assign = { (let_ | const_) ~ ident ~ "=" ~ expr }
reassign = { reassign_lhs ~ reassign_op ~ expr }
reassign_lhs = {
    deref_signs ~ ("(" ~ expr ~ ")" | ident)
    | ident
}
deref_signs = { "*"+ }
file = { file_ ~ string }
out = { out_ ~ expr }
return_stmt = { return_ ~ expr }

if_stmt = {
    if_ ~ expr ~ "?"? ~ stmt
    ~ (otherwise?
    ~   stmt
    )?
}
while_stmt = { while_ ~ expr ~ stmt }
for_stmt = {
    for_ ~ ":"?
    ~    stmt ~ ":"? ~ expr ~ ":"? ~ stmt 
    ~ ":"? ~ stmt
}
fx_ret = { "->" ~ kind }
function = {
    fx ~ ident ~ "(" 
    ~ (ident ~ ":" ~ kind
    ~ ("," ~ ident ~ ":" ~ kind)*)? 
    ~ ")"
    ~ fx_ret?
    ~ stmt
}
// databox = {
//     box_ ~ ident ~ "{"
//         ~ (ident ~ ":" ~ kind
//         ~ ("," ~ ident ~ ":" ~ kind)*)?
//     ~ "}"
// }
